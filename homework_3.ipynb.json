{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "657be689",
   "metadata": {},
   "source": [
    "# Самостоятельное задание #3\n",
    "\n",
    "\n",
    "### Задание 1\n",
    "\n",
    "Допишите функцию, которая принимает массив из 10 чисел и возвращает их сумму."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18ffcbab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Начните писать код тут\n",
    "n = [1, 2, 2, 5, 8, 9, 3, 10, 25, 5]\n",
    "def massive10_sum(n: list) -> float:\n",
    "    h = len(n)\n",
    "    if h != 10:\n",
    "        print('Кол-во элементов не равно 10')\n",
    "        return\n",
    "    sum = 0\n",
    "    for i in range(0, h):\n",
    "        sum += n[i]\n",
    "    else:\n",
    "        print(sum)\n",
    "\n",
    "massive10_sum(n)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb78afc0",
   "metadata": {},
   "source": [
    "\n",
    "### Задание 2\n",
    "\n",
    "Допишите функцию, которая принимает массив чисел и возвращает количество чисел равных нулю."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e8fe536",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Начните писать код тут\n",
    "a = [0,2,3,0,5,6,0,8,9,10]\n",
    "def calc_0(a) -> float:\n",
    "    n = 0\n",
    "    for i in a:\n",
    "        if i == 0:\n",
    "            n += 1\n",
    "    return n\n",
    "\n",
    "calc_0(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "570d5a26",
   "metadata": {},
   "source": [
    "\n",
    "### Задание 3\n",
    "\n",
    "Напишите программу, в которой задается  натуральное число n и выводится лестница из n ступенек, i-я ступенька должна состоять из чисел от 1 до i без пробелов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "69fd0501",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Начните писать код тут\n",
    "def lesenka(n:int) -> int:\n",
    "    for i in range(1, n + 1):\n",
    "        s = ''\n",
    "        for b in range(1, i + 1):\n",
    "            s += str(b)\n",
    "        else:\n",
    "            print(s)\n",
    "\n",
    "\n",
    "lesenka(7)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6ef1c44",
   "metadata": {},
   "source": [
    "\n",
    "### Задание 4\n",
    "\n",
    "Напишите программу, в которой задается натуральное число n и выводится пирамида из n ступенек, i-я ступень должна состоять из чисел от 1 до i и обратно без пробелов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b038f87",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Начните писать код тут\n",
    "def treyg(n):\n",
    "    for i in range(1, n + 1):\n",
    "        s = ' ' * (n - i)\n",
    "        for b in range(1, i + 1):\n",
    "            s += str(b)\n",
    "        else:\n",
    "            print(s + s[::-1])\n",
    "\n",
    "\n",
    "treyg(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4552ef5",
   "metadata": {},
   "source": [
    "\n",
    "### Задание 5\n",
    "\n",
    "Напишите программу, в которой задается натуральное число n и выводится ромб из `n*2-1` ступенек, i-я ступень должна состоять из чисел от 1 до i и обратно без пробелов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5eaae897",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Начните писать код тут\n",
    "def piramid(n: int) -> int:\n",
    "    for i in range(1, n + 1):  \n",
    "        s = ' ' * (n - i)\n",
    "        for b in range(1, i + 1):  \n",
    "            s += str(b)  \n",
    "        else:\n",
    "            print(s + s[::-1])  \n",
    "\n",
    "    for i in range(n - 1, 0, -1): \n",
    "        s = ' ' * (n - i)\n",
    "        for b in range(1, i + 1):\n",
    "            s += str(b)\n",
    "        else:\n",
    "            print(s + s[::-1])\n",
    "\n",
    "\n",
    "piramid(9)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
